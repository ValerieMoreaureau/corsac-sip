@startuml Netty Datagram Oriented Transport Protocol Request Processing
!includeurl https://raw.githubusercontent.com/RestComm/design/master/telestax-style.plantuml!0

autonumber
actor UAC

UAC -> Socket : INVITE
group Netty EventLoop Thread
    alt message from network case
        Socket -> Channel : DatagramPacket
        Channel -> NettyDatagramMessageDecoder : decode(DatagramPacket)
        NettyDatagramMessageDecoder -> NettyMessageParser : new
        NettyDatagramMessageDecoder -> NettyMessageParser : parseBytes(ByteBuf) \n all SIP Messages \n from the ByteBuf
        NettyDatagramMessageDecoder -> ChannelInboundHandler : consume all SIP Messages \n decoded by the Parser \n and pass them upstream
        ChannelInboundHandler -> NettyMessageHandler : channelRead(SIPMessage)
        NettyMessageHandler -> NettyDatagramMessageProcessor : createMessageChannel
        NettyDatagramMessageProcessor -> NettyDatagramMessageChannel : new Datagram Channel

        NettyMessageHandler -> IncomingMessageProcessingTask : new
        NettyMessageHandler -> MessageProcessorExecutor : addTaskLast        
    else message self routing case
        SipTransactionImpl -> SIPTransactionStack : selfrouteMessage(SIPMessage)
        SIPTransactionStack -> IncomingMessageProcessingTask : new
        SIPTransactionStack -> MessageProcessorExecutor : addTaskLast        
    end 
end
group MessageProcessorExecutor WorkerThread        
    MessageProcessorExecutor -> MessageProcessorExecutor : pull task from queue
    MessageProcessorExecutor -> IncomingMessageProcessingTask : execute

    IncomingMessageProcessingTask -> SIPEventInterceptor : beforeMessage(SIPMessage)
    IncomingMessageProcessingTask -> NettyDatagramMessageChannel : processMessage(SIPMessage)
    NettyDatagramMessageChannel -> NettyDatagramMessageChannel : check message validity and RPort
    NettyDatagramMessageChannel -> NettyDatagramMessageChannel : processSIPMessage(SIPMessage)
    NettyDatagramMessageChannel -> SIPTransactionStack : newSIPServerRequest
    SIPTransactionStack -> SIPMessageValve : loop through valves and \n call processRequest on them
    SIPTransactionStack -> SIPServerTransaction : new
    SIPServerTransaction -> TransactionSemaphore : new
    TransactionSemaphore -> ReentrantLock : new
    SIPTransactionStack -> NISTSIPMessageFactoryImpl : newSIPServerRequest 
    NISTSIPMessageFactoryImpl -> DialogFilter : new
    SIPTransactionStack -> SIPServerTransaction : setRequestInterface(DialogFilter)) 
    SIPTransactionStack -> NettyDatagramMessageChannel : send 100 Trying \n (if INVITE already being processed)
    NettyDatagramMessageChannel -> SIPServerTransaction : processRequest
    SIPServerTransaction -> SIPServerTransaction : update FSM state
    SIPServerTransaction -> SIPServerTransaction : send 100 Trying \n (if necessary)
    SIPServerTransaction -> SIPServerTransaction : If retransmission send last response    
    SIPServerTransaction -> DialogFilter : processRequest
    DialogFilter -> RequestEventExt : new
    DialogFilter -> SipProviderImpl : handleEvent
    SipProviderImpl -> EventWrapper : new
    SipProviderImpl -> EventScanner : deliverEvent(EventWrapper) \n if reentrant listener
    EventScanner -> SIPListener : processRequest        
    NettyMessageHandler -> SIPEventInterceptor : afterMessage(SIPMessage)
end
@enduml