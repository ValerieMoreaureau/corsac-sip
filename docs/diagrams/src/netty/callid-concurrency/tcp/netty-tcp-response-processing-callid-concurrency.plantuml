@startuml Netty Datagram Oriented Transport Protocol Response Processing
!includeurl https://raw.githubusercontent.com/RestComm/design/master/telestax-style.plantuml!0

autonumber
actor UAC

UAC -> Socket : INVITE
group Netty EventLoop Thread
    alt message from network case
        Socket -> Channel : bytes
        Channel -> NettyStreamMessageDecoder : decode(ByteBuf)
        NettyStreamMessageDecoder -> NettyMessageParser : new
        NettyStreamMessageDecoder -> NettyMessageParser : parseBytes(ByteBuf) \n all SIP Messages \n from the ByteBuf
        NettyStreamMessageDecoder -> ChannelInboundHandler : consume all SIP Messages \n decoded by the Parser \n and pass them upstream
        ChannelInboundHandler -> NettyMessageHandler : channelRead(SIPMessage)
        NettyMessageHandler -> NettyStreamMessageProcessor : createMessageChannel
        NettyStreamMessageProcessor -> NettyStreamMessageChannel : new if not already existing
        NettyMessageHandler -> NettyMessageHandler : deal with RFC5626 keepalives

        NettyMessageHandler -> IncomingMessageProcessingTask : new
        NettyMessageHandler -> MessageProcessorQueue : hash based on call id to one of the queues
        NettyMessageHandler -> MessageProcessorQueue : offer last task to the queue            
    else message self routing case
        SipTransactionImpl -> IncomingMessageProcessingTask : new
        NettyMessageHandler -> MessageProcessorQueue : hash based on call id to one of the queues
        NettyMessageHandler -> MessageProcessorQueue : offer last last task to the queue    
    end 
end
group MessageProcessor Thread        
    MessageProcessor -> IncomingMessageProcessingTask : pull task from queue
    MessageProcessor -> IncomingMessageProcessingTask : run task
    IncomingMessageProcessingTask -> SIPEventInterceptor : beforeMessage(SIPMessage)
    IncomingMessageProcessingTask -> NettyStreamMessageChannel : processMessage(SIPMessage)
    NettyStreamMessageChannel -> NettyStreamMessageChannel : check message validity and RPort
    NettyStreamMessageChannel -> NettyStreamMessageProcessor : cache Message Channel    
    NettyStreamMessageProcessor -> SIPTransactionStack : newSIPServerResponse
    SIPTransactionStack -> SIPMessageValve : loop through valves and \n call processResponse on them
    SIPTransactionStack -> SIPTransactionStack : findTransaction
    SIPTransactionStack -> NISTSIPMessageFactoryImpl : newSIPServerResponse 
    NISTSIPMessageFactoryImpl -> DialogFilter : new
    SIPTransactionStack -> SIPClientTransaction : setResponseInterface(DialogFilter)         
    NettyStreamMessageProcessor -> SIPClientTransaction : processResponse(SIPResponse, this)
    SIPClientTransaction -> SIPClientTransaction : check if retransmisision    
    alt Dialog Reuse
        SIPClientTransaction -> SIPClientTransaction : find Dialog
    else Dialog Creation
        SIPClientTransaction -> SIPClientTransaction : Dialog Creation
    end 
    SIPClientTransaction -> SIPClientTransaction : setDialog
    alt Invite Client Transaction
        SIPClientTransaction -> SIPClientTransaction : deal with ACK retrnsmission
        SIPClientTransaction -> SIPClientTransaction : update FSM state        
    else Non Invite Client Transaction
        SIPClientTransaction -> SIPClientTransaction : update FSM state\nand timers        
    end     
    SIPClientTransaction -> DialogFilter : processResponse
    DialogFilter -> DialogFilter : check forked Response
    DialogFilter -> ResponseEventExt : new
    DialogFilter -> SipProviderImpl : handleEvent
    SipProviderImpl -> EventWrapper : new
    SipProviderImpl -> EventScanner : deliverEvent(EventWrapper) \n if reentrant listener
    EventScanner -> SIPListener : processResponse        
    IncomingMessageProcessingTask -> SIPEventInterceptor : afterMessage(SIPMessage)  
end
@enduml