@startuml
!includeurl https://raw.githubusercontent.com/RestComm/design/master/telestax-style.plantuml!0

autonumber
actor UAC

UAC -> Socket : INVITE
group Netty EventLoop Thread
    Socket -> Channel : DatagramPacket
    Channel -> NettyDatagramMessageDecoder : decode(DatagramPacket)
    NettyDatagramMessageDecoder -> NettyMessageParser : new
    NettyDatagramMessageDecoder -> NettyMessageParser : parseBytes(ByteBuf) \n all SIP Messages \n from the ByteBuf
    NettyDatagramMessageDecoder -> ChannelInboundHandler : consume all SIP Messages \n decoded by the Parser \n and pass them upstream
    ChannelInboundHandler -> NettyMessageHandler : channelRead(SIPMessage)
    NettyMessageHandler -> SIPEventInterceptor : beforeMessage(SIPMessage)
    NettyMessageHandler -> NettyDatagramMessageChannel : processMessage(SIPMessage)
    NettyDatagramMessageChannel -> NettyDatagramMessageChannel : check message validity and RPort
    NettyDatagramMessageChannel -> NettyDatagramMessageChannel : processSIPMessage(SIPMessage)
    NettyDatagramMessageChannel -> SIPTransactionStack : newSIPServerRequest
    SIPTransactionStack -> SIPMessageValve : loop through valves and \n call processRequest on them
    SIPTransactionStack -> SIPServerTransaction : new
    SIPServerTransaction -> TransactionSemaphore : new
    TransactionSemaphore -> ReentrantLock : new
    SIPTransactionStack -> NISTSIPMessageFactoryImpl : newSIPServerRequest 
    NISTSIPMessageFactoryImpl -> DialogFilter : new
    SIPTransactionStack -> SIPServerTransaction : setRequestInterface(DialogFilter)) 
    SIPTransactionStack -> SIPServerTransaction : acquireSem()
    SIPServerTransaction -> TransactionSemaphore : acquire()
    TransactionSemaphore -> ReentrantLock : lock() or tryLock(MILLIS) \n depending on the listener timeout
    SIPTransactionStack -> NettyDatagramMessageChannel : send 100 Trying \n (if INVITE already being processed)
    NettyDatagramMessageChannel -> SIPServerTransaction : processRequest
    SIPServerTransaction -> SIPServerTransaction : update FSM state
    SIPServerTransaction -> SIPServerTransaction : send 100 Trying \n (if necessary)
    SIPServerTransaction -> SIPServerTransaction : If retransmission send last response    
    SIPServerTransaction -> DialogFilter : processRequest
    DialogFilter -> RequestEventExt : new
    DialogFilter -> SipProviderImpl : handleEvent
    SipProviderImpl -> EventWrapper : new
    SipProviderImpl -> EventScanner : deliverEvent(EventWrapper) \n if reentrant listener
    EventScanner -> SIPListener : processRequest    
    NettyDatagramMessageChannel -> SIPServerTransaction : releaseSem()
    SIPServerTransaction -> TransactionSemaphore : release()
    TransactionSemaphore -> ReentrantLock : unlock()    
end
@enduml